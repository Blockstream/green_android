plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'
    id 'com.google.dagger.hilt.android'
    alias libs.plugins.google.devtools.ksp
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.adarshr.test-logger' version '3.2.0'
}

//https://developer.android.com/studio/publish/app-signing#secure-key
// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
if (keystorePropertiesFile.exists()){
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else { // or if not exists get them from env variables
    keystoreProperties.put("storeFile",  System.getenv("KEYSTORE_FILE") ?: "")
    keystoreProperties.put("storePassword", System.getenv("KEYSTORE_PASSWORD") ?: "")
    keystoreProperties.put("keyAlias", System.getenv("KEY_ALIAS") ?: "")
    keystoreProperties.put("keyPassword", System.getenv("KEY_PASSWORD") ?: "")
}

android {
    namespace 'com.blockstream.green'
    compileSdk 33

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 404
        versionName "4.0.4"
        setProperty("archivesBaseName", "BlockstreamGreen" + "-v" + versionName)

        testApplicationId "com.blockstream.green.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        sign {
            var keystoreFile = keystoreProperties["storeFile"] != null && keystoreProperties["storeFile"] != "" ? rootProject.file(keystoreProperties["storeFile"]) : null
            storeFile keystoreFile != null && keystoreFile.exists() ? keystoreFile : null
            storePassword keystoreProperties.containsKey("storePassword") ? keystoreProperties["storePassword"] : ""
            keyAlias keystoreProperties.containsKey("keyAlias") ? keystoreProperties["keyAlias"] : ""
            keyPassword keystoreProperties.containsKey("keyPassword") ? keystoreProperties["keyPassword"] : ""
        }
    }

    flavorDimensions "normal"
    productFlavors {
        development {
            applicationId "com.greenaddress.greenbits_android_wallet.dev"
            versionNameSuffix "-dev" + appendGdkCommitHash(rootProject, true)
            resValue "string", "app_name", "Green Dev"
            resValue "string", "application_id", applicationId
            resValue "bool", "feature_analytics", "true"
            resValue "bool", "feature_rate_google_play", "true"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_dev",
                    appIconRound: "@mipmap/ic_launcher_dev_round",
                    enableQATester: true
            ]
        }

        productionGoogle {
            applicationId "com.greenaddress.greenbits_android_wallet"
            resValue "string", "app_name", "Green"
            resValue "string", "application_id", applicationId
            resValue "bool", "feature_analytics", "true"
            resValue "bool", "feature_rate_google_play", "true"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher",
                    appIconRound: "@mipmap/ic_launcher_round",
                    enableQATester: false
            ]
        }

        production {
            applicationId "com.greenaddress.greenbits_android_wallet"
            versionNameSuffix appendGdkCommitHash(rootProject, false)
            resValue "string", "app_name", "Green"
            resValue "string", "application_id", applicationId
            resValue "bool", "feature_analytics", "false"
            resValue "bool", "feature_rate_google_play", "false"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher",
                    appIconRound: "@mipmap/ic_launcher_round",
                    enableQATester: false
            ]
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.versionCodeOverride = 22000000 + android.defaultConfig.versionCode
        }
    }
    buildFeatures {
        dataBinding true
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            matchingFallbacks = ['normal']
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if(signingConfigs.sign.storeFile != null){
                productFlavors.development.signingConfig signingConfigs.sign
                productFlavors.production.signingConfig signingConfigs.sign
                productFlavors.productionGoogle.signingConfig signingConfigs.sign
            }
        }
    }
    compileOptions {
        sourceCompatibility = "11"
        targetCompatibility = "11"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
    lint {
        abortOnError false
        disable 'MissingTranslation'
        ignoreWarnings false
    }
}

// For KSP, configure using KSP extension:
ksp {
    arg(new RoomSchemaArgProvider(new File(projectDir, "schemas")))
}

kotlin {
    jvmToolchain(11)
}

// Configure kapt to correct error types by setting correctErrorTypes to true
kapt {
    correctErrorTypes true
}

testlogger {
    theme 'mocha'
}
dependencies {
    /**  --- Modules ---------------------------------------------------------------------------- */
    implementation project(':base')
    implementation project(':hardware')
    implementation project(':jade')
    implementation project(':crypto')

    developmentImplementation project(':gms')
    productionGoogleImplementation project(':gms')
    productionImplementation project(':no-gms') // F-Droid
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Navigation ------------------------------------------------------------------------- */
    implementation libs.navigation.fragment.ktx
    implementation libs.navigation.ui.ktx
    testImplementation libs.navigation.testing
    androidTestImplementation libs.androidx.navigation.navigation.testing
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Room ------------------------------------------------------------------------------- */
    implementation libs.androidx.room.runtime
    ksp libs.androidx.room.compiler
    implementation libs.androidx.room.ktx
    testImplementation libs.androidx.room.testing
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Hilt Dependency Injection  --------------------------------------------------------- */
    implementation libs.hilt.android
    kapt libs.hilt.android.compiler

    // For instrumentation tests
    androidTestImplementation libs.hilt.android.testing
    kaptAndroidTest libs.hilt.android.compiler

    // For local unit tests
    testImplementation libs.google.hilt.android.testing
    kaptTest libs.hilt.android.compiler
    /** ----------------------------------------------------------------------------------------- */

    /**  --- RxJava  ---------------------------------------------------------------------------- */
    implementation libs.rxjava
    implementation libs.rxkotlin
    implementation libs.rxandroid
    implementation "com.jakewharton.rxbinding4:rxbinding:4.0.0"
    implementation "com.github.akarnokd:rxjava3-bridge:3.0.2"
    /** ----------------------------------------------------------------------------------------- */

    /**  --- FastAdapter  ----------------------------------------------------------------------- */
    implementation libs.fastadapter
    implementation libs.fastadapter.extensions.diff // diff util helpers
    implementation libs.fastadapter.extensions.binding // view binding helpers
    implementation libs.fastadapter.extensions.expandable
    implementation libs.fastadapter.extensions.ui // pre-defined ui components
    implementation libs.fastadapter.extensions.scroll
    implementation libs.fastadapter.extensions.utils
    implementation libs.itemanimators
    /** ----------------------------------------------------------------------------------------- */

    /**  --- QR Scanner ------------------------------------------------------------------------- */
    implementation(libs.zxing.android.embedded) { transitive = false }
    implementation libs.zxing.core // API <= 24 compatibility
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Uniform Resources ------------------------------------------------------------------ */
    implementation('com.sparrowwallet:hummingbird:1.6.6')
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Jackson ---------------------------------------------------------------------------- */
    implementation libs.jackson.datatype.json.org
    implementation libs.jackson.dataformat.cbor
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Countly ---------------------------------------------------------------------------- */
    implementation libs.countly.sdk.android
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Beagle  ---------------------------------------------------------------------------- */
    developmentImplementation libs.beagle.ui.drawer
    developmentImplementation libs.beagle.log.crash

    productionGoogleImplementation libs.beagle.noop
    productionGoogleImplementation libs.beagle.log.crash.noop

    productionImplementation libs.beagle.noop
    productionImplementation libs.beagle.log.crash.noop
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Slide To Act ----------------------------------------------------------------------- */
    implementation libs.slidetoact
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Rive ------------------------------------------------------------------------------- */
    implementation libs.rive.android
    /** ----------------------------------------------------------------------------------------- */

    testImplementation fileTree(dir: 'libs', include: ['.jar', '.so'])

    testImplementation libs.junit
    testImplementation libs.androidx.core.testing
    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.mockito.kotlin

    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}

static def appendGdkCommitHash(Project project, Boolean enableGitSubmodule) {
    def gdkCommit = System.getenv('GDK_COMMIT')
    def gdkCommitFile = project.file("crypto/gdk_commit")
    def hash = false

    if (gdkCommit != null) {
        hash = gdkCommit
    } else if (gdkCommitFile.exists()){
        def content = gdkCommitFile.text.trim()
        hash = content.substring(0, Math.min(8, content.length()))
    } else if (enableGitSubmodule) {
        def cmd = "git --git-dir=crypto/gdk/.git rev-parse --short HEAD"
        def proc = cmd.execute()
        hash = proc.text.trim()
    }

    hash ? ("-gdk:" + hash) : ""
}

task verifyDependencies(type: GradleBuild) {
    tasks = ['lintDevelopmentRelease', 'assembleProductionRelease']
}

class RoomSchemaArgProvider implements CommandLineArgumentProvider {

    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)
    File schemaDir

    RoomSchemaArgProvider(File schemaDir) {
        this.schemaDir = schemaDir
    }

    @Override
    Iterable<String> asArguments() {
        return ["room.schemaLocation=${schemaDir.path}".toString()]
    }
}