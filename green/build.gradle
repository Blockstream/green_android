plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.adarshr.test-logger' version '2.1.1'
}

//https://developer.android.com/studio/publish/app-signing#secure-key
// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
if (keystorePropertiesFile.exists()){
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else { // or if not exists get them from env variables
    keystoreProperties.put("storeFile",  System.getenv("KEYSTORE_FILE") ?: "")
    keystoreProperties.put("storePassword", System.getenv("KEYSTORE_PASSWORD") ?: "")
    keystoreProperties.put("keyAlias", System.getenv("KEY_ALIAS") ?: "")
    keystoreProperties.put("keyPassword", System.getenv("KEY_PASSWORD") ?: "")
}

android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 390
        versionName "3.9.0"
        setProperty("archivesBaseName", "BlockstreamGreen" + "-v" + versionName)

        // Export schemas
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }

        testApplicationId "com.blockstream.green.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        sign {
            var keystoreFile = keystoreProperties["storeFile"] != null && keystoreProperties["storeFile"] != "" ? rootProject.file(keystoreProperties["storeFile"]) : null
            storeFile keystoreFile != null && keystoreFile.exists() ? keystoreFile : null
            storePassword keystoreProperties.containsKey("storePassword") ? keystoreProperties["storePassword"] : ""
            keyAlias keystoreProperties.containsKey("keyAlias") ? keystoreProperties["keyAlias"] : ""
            keyPassword keystoreProperties.containsKey("keyPassword") ? keystoreProperties["keyPassword"] : ""
        }
    }

    flavorDimensions "normal"
    productFlavors {
        development {
            applicationId "com.greenaddress.greenbits_android_wallet.dev"
            versionNameSuffix "-dev" + appendGdkCommitHash(rootProject, true)
            resValue "string", "app_name", "Green Dev"
            resValue "string", "application_id", applicationId
            resValue "bool", "feature_analytics", "true"
            resValue "bool", "feature_rate_google_play", "true"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_dev",
                    appIconRound: "@mipmap/ic_launcher_dev_round",
                    enableQATester: true
            ]
        }

        productionGoogle {
            applicationId "com.greenaddress.greenbits_android_wallet"
            resValue "string", "app_name", "Green"
            resValue "string", "application_id", applicationId
            resValue "bool", "feature_analytics", "true"
            resValue "bool", "feature_rate_google_play", "true"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher",
                    appIconRound: "@mipmap/ic_launcher_round",
                    enableQATester: false
            ]
        }

        production {
            applicationId "com.greenaddress.greenbits_android_wallet"
            versionNameSuffix appendGdkCommitHash(rootProject, false)
            resValue "string", "app_name", "Green"
            resValue "string", "application_id", applicationId
            resValue "bool", "feature_analytics", "false"
            resValue "bool", "feature_rate_google_play", "false"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher",
                    appIconRound: "@mipmap/ic_launcher_round",
                    enableQATester: false
            ]
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.versionCodeOverride = 22000000 + android.defaultConfig.versionCode
        }
    }
    buildFeatures {
        dataBinding true
    }
    buildTypes {
        release {
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true
            matchingFallbacks = ['normal']
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if(signingConfigs.sign.storeFile != null){
                productFlavors.development.signingConfig signingConfigs.sign
                productFlavors.production.signingConfig signingConfigs.sign
                productFlavors.productionGoogle.signingConfig signingConfigs.sign
            }
        }
    }
    splits {
        abi {
            enable false
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
    lint {
        abortOnError false
        disable 'MissingTranslation'
        ignoreWarnings false
    }
}

// Configure kapt to correct error types by setting correctErrorTypes to true
kapt {
    correctErrorTypes true
}

testlogger {
    theme 'mocha'
}
dependencies {
    /**  --- Modules ---------------------------------------------------------------------------- */
    implementation project(':hardware')
    implementation project(':crypto')
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Kotlin & KotlinX ------------------------------------------------------------------- */
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$kotlinx_serialization_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinx_serialization_version"
    implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.2.0")
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Android / Google ------------------------------------------------------------------- */
    implementation "androidx.core:core-ktx:1.8.0"
    implementation "androidx.appcompat:appcompat:1.4.2"
    implementation "com.google.android.material:material:1.6.1"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.activity:activity-ktx:1.5.0"
    implementation "androidx.biometric:biometric:1.2.0-alpha04"
    implementation "androidx.preference:preference-ktx:1.2.0"
    implementation "androidx.browser:browser:1.4.0"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "com.google.android.play:review-ktx:2.0.0"
    implementation "com.android.installreferrer:installreferrer:2.2"
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Lifecycle -------------------------------------------------------------------------- */
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.0"
    implementation "androidx.lifecycle:lifecycle-process:2.5.0"
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Navigation ------------------------------------------------------------------------- */
    implementation "androidx.navigation:navigation-fragment-ktx:2.5.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.5.0"
    testImplementation "androidx.navigation:navigation-testing:2.5.0"
    androidTestImplementation "androidx.navigation:navigation-testing:2.5.0"
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Room ------------------------------------------------------------------------------- */
    implementation "androidx.room:room-runtime:2.4.2"
    implementation "androidx.room:room-rxjava3:2.4.2"
    kapt "androidx.room:room-compiler:2.4.2"
    implementation "androidx.room:room-ktx:2.4.2"
    testImplementation "androidx.room:room-testing:2.4.2"
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Hilt Dependency Injection  --------------------------------------------------------- */
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // For instrumentation tests
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    // For local unit tests
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    /** ----------------------------------------------------------------------------------------- */

    /**  --- RxJava  ---------------------------------------------------------------------------- */
    implementation "io.reactivex.rxjava3:rxjava:3.0.12"
    implementation "io.reactivex.rxjava3:rxkotlin:3.0.1"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation "com.jakewharton.rxbinding4:rxbinding:4.0.0"
    implementation "com.github.akarnokd:rxjava3-bridge:3.0.0"
    /** ----------------------------------------------------------------------------------------- */

    /**  --- FastAdapter  ----------------------------------------------------------------------- */
    implementation "com.mikepenz:fastadapter:5.6.0"
    implementation "com.mikepenz:fastadapter-extensions-diff:5.6.0" // diff util helpers
    implementation "com.mikepenz:fastadapter-extensions-binding:5.6.0" // view binding helpers
    implementation "com.mikepenz:fastadapter-extensions-expandable:5.6.0"
    implementation "com.mikepenz:fastadapter-extensions-ui:5.6.0" // pre-defined ui components
    implementation "com.mikepenz:fastadapter-extensions-scroll:5.6.0"
    implementation "com.mikepenz:fastadapter-extensions-utils:5.6.0"
    implementation "com.mikepenz:itemanimators:1.1.0"
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Logging ---------------------------------------------------------------------------- */
    implementation 'org.slf4j:slf4j-android:1.7.30'
    implementation 'io.github.microutils:kotlin-logging:1.12.0'
    /** ----------------------------------------------------------------------------------------- */

    /**  --- QR Scanner ------------------------------------------------------------------------- */
    implementation('com.journeyapps:zxing-android-embedded:4.1.0') { transitive = false }
    implementation 'com.google.zxing:core:3.3.3' // API <= 24 compatibility
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Jackson ---------------------------------------------------------------------------- */
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-json-org:2.9.6'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.6'
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Countly ---------------------------------------------------------------------------- */
    // implementation 'ly.count.android:sdk:21.11.1'
    implementation 'com.github.angelix:countly-sdk-android:81ed2c919e'
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Beagle  ---------------------------------------------------------------------------- */
    developmentImplementation "io.github.pandulapeter.beagle:ui-drawer:2.8.2"
    developmentImplementation "io.github.pandulapeter.beagle:log-crash:2.8.2"

    productionGoogleImplementation "io.github.pandulapeter.beagle:noop:2.8.2"
    productionGoogleImplementation "io.github.pandulapeter.beagle:log-crash-noop:2.8.2"

    productionImplementation "io.github.pandulapeter.beagle:noop:2.8.2"
    productionImplementation "io.github.pandulapeter.beagle:log-crash-noop:2.8.2"
    /** ----------------------------------------------------------------------------------------- */

    /**  --- Slide To Act ----------------------------------------------------------------------- */
    implementation "com.ncorti:slidetoact:0.9.0"
    /** ----------------------------------------------------------------------------------------- */

    testImplementation fileTree(dir: 'libs', include: ['.jar', '.so'])

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.3'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

static def appendGdkCommitHash(Project project, Boolean enableGitSubmodule) {
    def gdkCommit = System.getenv('GDK_COMMIT')
    def gdkCommitFile = project.file("crypto/gdk_commit")
    def hash = false

    if (gdkCommit != null) {
        hash = gdkCommit
    } else if (gdkCommitFile.exists()){
        def content = gdkCommitFile.text.trim()
        hash = content.substring(0, Math.min(8, content.length()))
    } else if (enableGitSubmodule) {
        def cmd = "git --git-dir=crypto/gdk/.git rev-parse --short HEAD"
        def proc = cmd.execute()
        hash = proc.text.trim()
    }

    hash ? ("-gdk:" + hash) : ""
}

task verifyDependencies(type: GradleBuild) {
    tasks = ['lintDevelopmentRelease', 'assembleProductionRelease']
}
